
==================== FINAL INTERFACE ====================
2018-03-25 23:55:26.110192 UTC

interface create-app-0.1.0.0-OcFFDFPaN4DOt17bSwIOm:Lib 8002
  interface hash: bc72ceea2ec39944f56626e19eee7aa1
  ABI hash: 668cd44181101a1eb398234a6ea99374
  export-list hash: bc865f1cd6020ebd5de839abe231e030
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 24d08bf1fca4cd3ed34e3c4d3a3d84eb
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.asLocal
  Lib.askToRun
  Lib.backendDirConfig
  Lib.buildBackEnd
  Lib.buildFrontEnd
  Lib.frontendDirConfig
  Lib.getDir
  Lib.getTemplate
  Lib.majorCommentBlock
  Lib.runBackEnd
  Lib.runFrontEnd
  Lib.runServers
  Lib.setupDir
  Lib.validateAndSetupDir
  Lib.validateInitialSetup
  Lib.DirSetup{Lib.DirSetup dirName dirStackType gitDir}
  Lib.DirStackType{Lib.BACK_END Lib.FRONT_END}
  Lib.ValidateResult{Lib.Keep Lib.Replace Lib.Valid}
module dependencies:
package dependencies: StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      ansi-terminal-0.6.3.1@ansi-terminal-0.6.3.1-3RTqikoQf47ajVD9m8zgB
                      ansi-wl-pprint-0.6.7.3@ansi-wl-pprint-0.6.7.3-A79v826bgPr574HtaZPPqC
                      array-0.5.1.1@array-0.5.1.1
                      async-2.1.1.1@async-2.1.1.1-8yywY4inVGRLJSCg60gBXj base-4.9.1.0
                      base-orphans-0.5.4@base-orphans-0.5.4-ABoxiBf7nXc7Qqh66CgYc9
                      bifunctors-5.4.2@bifunctors-5.4.2-wt6HPG9UFgCjbd0zbVYNT
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      clock-0.7.2@clock-0.7.2-8dRNleB7rysIZAOReuhpZA
                      comonad-5.0.1@comonad-5.0.1-7j4AeOMTFovFSFO9XMFm1
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-3UCY3arLvoG71jrGOYoc39
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      distributive-0.5.2@distributive-0.5.2-JCgfTXNR3ywAyV7fFWIBI5
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      filepath-1.4.1.1@filepath-1.4.1.1
                      foldl-1.2.5@foldl-1.2.5-GnHTdmg6FDQJw15ROvgHqA
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-I8TtfTMw8kCEo1q1h2BgxU
                      hostname-1.0@hostname-1.0-LHxcvBDHWay1RGMj1Uzenf
                      integer-gmp-1.0.0.1
                      managed-1.0.5@managed-1.0.5-83xU3i5xYzoBicHocI7GYo
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      mwc-random-0.13.6.0@mwc-random-0.13.6.0-4EKMGw6QfaJLMhRUSL730j
                      optional-args-1.0.1@optional-args-1.0.1-5AJ5OjRkffb7RAwPRPUJYx
                      optparse-applicative-0.13.2.0@optparse-applicative-0.13.2.0-EqIYOWOFTvf23sT5QTYn9U
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      process-1.4.3.0@process-1.4.3.0
                      profunctors-5.2@profunctors-5.2-85ZLvwISeusLRZoJlitoyP
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      system-fileio-0.3.16.3@system-fileio-0.3.16.3-61LlQGWPM058CmyFq3wwtN
                      system-filepath-0.4.13.4@system-filepath-0.4.13.4-FWiHTT5fTCT3S4HJQGlD59
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      temporary-1.2.1@temporary-1.2.1-74wXvKX6cPmH7eOQxlSWZQ
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      turtle-1.3.6@turtle-1.3.6-XlN6ql6rbNF57mlD2v5fz
                      unix-2.7.2.1@unix-2.7.2.1
                      unix-compat-0.4.3.1@unix-compat-0.4.3.1-Ausmw6d7KIwA7sl52mzqxC
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-6txQagwbKwSESVNJVBgwqv
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-I8TtfTMw8kCEo1q1h2BgxU:Data.Hashable.Generic
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         system-filepath-0.4.13.4@system-filepath-0.4.13.4-FWiHTT5fTCT3S4HJQGlD59:Filesystem.Path
         system-filepath-0.4.13.4@system-filepath-0.4.13.4-FWiHTT5fTCT3S4HJQGlD59:Filesystem.Path.CurrentOS
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         bifunctors-5.4.2@bifunctors-5.4.2-wt6HPG9UFgCjbd0zbVYNT:Data.Bifunctor.Biff
                         bifunctors-5.4.2@bifunctors-5.4.2-wt6HPG9UFgCjbd0zbVYNT:Data.Bifunctor.Clown
                         bifunctors-5.4.2@bifunctors-5.4.2-wt6HPG9UFgCjbd0zbVYNT:Data.Bifunctor.Joker
                         bifunctors-5.4.2@bifunctors-5.4.2-wt6HPG9UFgCjbd0zbVYNT:Data.Bifunctor.Product
                         bifunctors-5.4.2@bifunctors-5.4.2-wt6HPG9UFgCjbd0zbVYNT:Data.Bifunctor.Sum
                         bifunctors-5.4.2@bifunctors-5.4.2-wt6HPG9UFgCjbd0zbVYNT:Data.Bifunctor.Tannen
                         clock-0.7.2@clock-0.7.2-8dRNleB7rysIZAOReuhpZA:System.Clock
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         mwc-random-0.13.6.0@mwc-random-0.13.6.0-4EKMGw6QfaJLMhRUSL730j:System.Random.MWC
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-6txQagwbKwSESVNJVBgwqv:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-6txQagwbKwSESVNJVBgwqv:Data.HashSet
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Data.Function 7aca86bfbd92366def5f260e30cb2628
import  -/  base-4.9.1.0:Data.Monoid 51cc9cd8c130d49ba96b7c2c2406022b
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.IO.Exception 5064be4c355632a1d1c4f2322f56ac52
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  system-filepath-0.4.13.4@system-filepath-0.4.13.4-FWiHTT5fTCT3S4HJQGlD59:Filesystem.Path e5c856c8ed8980f0e3765332fe68f424
import  -/  system-filepath-0.4.13.4@system-filepath-0.4.13.4-FWiHTT5fTCT3S4HJQGlD59:Filesystem.Path.CurrentOS 77dd33ec69302cf21b6fa1ceec93c125
import  -/  system-filepath-0.4.13.4@system-filepath-0.4.13.4-FWiHTT5fTCT3S4HJQGlD59:Filesystem.Path.Internal 413a5f7870667033640c9c9dc3ca9912
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Internal a2f6f66c5bb1247458d9fa25257ab188
import  -/  turtle-1.3.6@turtle-1.3.6-XlN6ql6rbNF57mlD2v5fz:Turtle 2d73177f5fb84fe62ef5503be4ba294d
import  -/  turtle-1.3.6@turtle-1.3.6-XlN6ql6rbNF57mlD2v5fz:Turtle.Format 05de819ce957bff17f753aa8e4be38f7
import  -/  turtle-1.3.6@turtle-1.3.6-XlN6ql6rbNF57mlD2v5fz:Turtle.Line 7a8609f631adab632ff0766dd1748a47
import  -/  turtle-1.3.6@turtle-1.3.6-XlN6ql6rbNF57mlD2v5fz:Turtle.Prelude 81005099d00b6aa79cbb29650d683a79
71a1d6f1a339dcf0b157ad03eb150175
  $tc'BACK_END :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11237060812147939424##
                   13864023516728671442##
                   Lib.$trModule
                   Lib.$tc'BACK_END1) -}
7a6a118e6a1dfda6a0888466f28d8334
  $tc'BACK_END1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BACK_END"#) -}
01170cf487a60002d865c48d948cf443
  $tc'DirSetup :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12249063848439127623##
                   17714116769608140053##
                   Lib.$trModule
                   Lib.$tc'DirSetup1) -}
2ae782209418107e1c69118d060b15cd
  $tc'DirSetup1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DirSetup"#) -}
b23b6eb60e2c6c700b1b45126a086c33
  $tc'FRONT_END :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3839601190191201117##
                   748339126412467822##
                   Lib.$trModule
                   Lib.$tc'FRONT_END1) -}
d3bd989d8dbc57fb8a873454ba91d1f0
  $tc'FRONT_END1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FRONT_END"#) -}
6484c3fd33fde6c9fa527f30df689d3a
  $tc'Keep :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17286948021104113713##
                   12596222439487764738##
                   Lib.$trModule
                   Lib.$tc'Keep1) -}
b995750b615482610890fa572731cb9b
  $tc'Keep1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Keep"#) -}
5b1f5b7fb7e9769d243f506f6e2a265b
  $tc'Replace :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11094129813712651894##
                   8091998123995439827##
                   Lib.$trModule
                   Lib.$tc'Replace1) -}
c71616a13e4e5ef7a36de8d4e0fa2d65
  $tc'Replace1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Replace"#) -}
83c66218e83012001ff43797cf463e7f
  $tc'Valid :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5365342292923114348##
                   15342100279308624421##
                   Lib.$trModule
                   Lib.$tc'Valid1) -}
63f663161070a97dbb3d0352b6e38bbb
  $tc'Valid1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Valid"#) -}
7df4ab49fb733f44bf9eb986c9d841de
  $tcDirSetup :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3999449829237139812##
                   2478430975354547167##
                   Lib.$trModule
                   Lib.$tcDirSetup1) -}
ec26ea4f6f20b992293556f9a36d9d0d
  $tcDirSetup1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "DirSetup"#) -}
0bf5343b1d981e2c9d84be5727060d25
  $tcDirStackType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11842959856979616803##
                   17925994729151360688##
                   Lib.$trModule
                   Lib.$tcDirStackType1) -}
865974c4794a67f64f9e6b9919163ac0
  $tcDirStackType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "DirStackType"#) -}
d204cfab589d8edaca53f40f55fc69cc
  $tcValidateResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17807625981805552365##
                   15028337061502277500##
                   Lib.$trModule
                   Lib.$tcValidateResult1) -}
0014609212d3e15ac61906747a8f86cb
  $tcValidateResult1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ValidateResult"#) -}
bf2926016d6791699994c4010afa6b0c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
0cc5bcc63461b90616ee968d41c94f23
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
d89b56b89aab898ee105775d03a62fd0
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "create-app-0.1.0.0-OcFFDFPaN4DOt17bSwIOm"#) -}
830dbc432ad754b54ce7270b9d5bb2c8
  $wgetDir ::
    Filesystem.Path.Internal.FilePath
    -> Lib.DirSetup
    -> (# Data.Text.Internal.Text, Filesystem.Path.Internal.FilePath #)
  {- Arity: 2, Strictness: <L,U(1*U,1*U,U,U)><L,1*U(A,1*U(U,U,U),A)>,
     Inline: [0],
     Unfolding: (\ (w :: Filesystem.Path.Internal.FilePath)
                   (w1 :: Lib.DirSetup) ->
                 let {
                   dname :: Data.Text.Internal.Text
                   = case w1 of wild { Lib.DirSetup ds ds1 ds2 -> ds1 }
                 } in
                 (# dname,
                    case dname of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                    case Filesystem.Path.Rules.$wposixFromText
                           ww1
                           ww2
                           ww3 of ww4 { (#,,,#) ww5 ww6 ww7 ww8 ->
                    case ww5 of wild {
                      GHC.Base.Nothing
                      -> Filesystem.Path.Internal.FilePath
                           (Filesystem.Path.Internal.pathRoot w)
                           (case w of wild1 { Filesystem.Path.Internal.FilePath ds1 ds2 ds3 ds4 ->
                            GHC.Base.++
                              @ [GHC.Types.Char]
                              ds2
                              (case Filesystem.Path.Internal.$fEqFilePath_$ccompare
                                      (Filesystem.Path.Internal.FilePath
                                         (GHC.Base.Nothing @ Filesystem.Path.Internal.Root)
                                         (GHC.Types.[] @ Filesystem.Path.Internal.Directory)
                                         ds3
                                         ds4)
                                      Filesystem.Path.Internal.empty of wild2 {
                                 DEFAULT
                                 -> GHC.Types.:
                                      @ [GHC.Types.Char]
                                      (Filesystem.Path.Internal.filenameChunk_$sgo
                                         (case ds3 of wild3 {
                                            GHC.Base.Nothing -> GHC.Types.[] @ GHC.Types.Char
                                            GHC.Base.Just x -> x })
                                         (case ds4 of wild3 {
                                            [] -> GHC.Types.[] @ Filesystem.Path.Internal.Chunk
                                            : ipv ipv1
                                            -> GHC.Types.:
                                                 @ Filesystem.Path.Internal.Chunk
                                                 (GHC.Types.[] @ GHC.Types.Char)
                                                 (Data.OldList.prependToAll
                                                    @ Filesystem.Path.Internal.Chunk
                                                    Filesystem.Path.Internal.dot
                                                    wild3) }))
                                      ww6
                                 GHC.Types.EQ -> ww6 }) })
                           ww7
                           ww8
                      GHC.Base.Just ds
                      -> case ds of wild1 {
                           DEFAULT -> Filesystem.Path.Internal.FilePath wild ww6 ww7 ww8
                           Filesystem.Path.Internal.RootWindowsCurrentVolume
                           -> case w of wild2 { Filesystem.Path.Internal.FilePath ds1 ds2 ds3 ds4 ->
                              case ds1 of wild3 {
                                GHC.Base.Nothing
                                -> Filesystem.Path.Internal.FilePath wild ww6 ww7 ww8
                                GHC.Base.Just ds7
                                -> case ds7 of wild4 {
                                     DEFAULT -> Filesystem.Path.Internal.FilePath wild ww6 ww7 ww8
                                     Filesystem.Path.Internal.RootWindowsVolume ds8 ds9
                                     -> Filesystem.Path.Internal.FilePath
                                          wild3
                                          ww6
                                          ww7
                                          ww8 } } } } } } } #)) -}
50224f7c9920287f86d313b94a9178a4
  data DirSetup
    = DirSetup {dirStackType :: Lib.DirStackType,
                dirName :: Data.Text.Internal.Text,
                gitDir :: Data.Text.Internal.Text}
e60e746616d7b55c2f4782c0051ce6fa
  data DirStackType = FRONT_END | BACK_END
3afbc010689f45e61742e142d1aefc70
  data ValidateResult = Valid | Replace | Keep
c9d8d776be5e62c3d657eb461851ba29
  asLocal :: (Data.String.IsString m, GHC.Base.Monoid m) => m -> m
  {- Arity: 3,
     Strictness: <L,1*C1(U)><S(LC(C(S))L),1*U(A,1*C1(C1(U)),A)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m
                   ($dIsString :: Data.String.IsString m)
                   ($dMonoid :: GHC.Base.Monoid m)
                   (dirName1 :: m) ->
                 GHC.Base.mappend
                   @ m
                   $dMonoid
                   ($dIsString `cast` (Data.String.N:IsString[0] <m>_N) Lib.asLocal1)
                   dirName1) -}
1a69341407c8459b66d02caa950aa0db
  asLocal1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "./"#) -}
b170cd348a3183a60141a8ff2f020706
  askToRun :: Control.Monad.IO.Class.MonadIO m => m () -> m ()
  {- Arity: 2, Strictness: <S(SL),U(1*U,C(U))><L,U>,
     Unfolding: (\ @ (m :: * -> *)
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   (eta :: m ()) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.IO.Class.$p1MonadIO @ m $dMonadIO
                 } in
                 GHC.Base.>>
                   @ m
                   $dMonad
                   @ ()
                   @ ()
                   (Control.Monad.IO.Class.liftIO
                      @ m
                      $dMonadIO
                      @ ()
                      Lib.askToRun11 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)))
                   (let {
                      lvl18 :: m ()
                      = Control.Monad.IO.Class.liftIO
                          @ m
                          $dMonadIO
                          @ ()
                          Lib.askToRun8 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))
                    } in
                    let {
                      lvl19 :: m ()
                      = Control.Monad.IO.Class.liftIO
                          @ m
                          $dMonadIO
                          @ ()
                          Lib.askToRun5 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (GHC.Base.Maybe Turtle.Line.Line)
                      @ ()
                      (Control.Monad.IO.Class.liftIO
                         @ m
                         $dMonadIO
                         @ (GHC.Base.Maybe Turtle.Line.Line)
                         Turtle.Prelude.readline1
                           `cast`
                         (Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe Turtle.Line.Line>_R)))
                      (\ (maybeAnswer :: GHC.Base.Maybe Turtle.Line.Line) ->
                       case maybeAnswer of wild {
                         GHC.Base.Nothing -> lvl18
                         GHC.Base.Just a
                         -> case a `cast`
                                 (Turtle.Line.N:Line[0]) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                            case Lib.askToRun3
                                   `cast`
                                 (Turtle.Line.N:Line[0]) of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                            let {
                              $j :: GHC.Prim.Void# -> m () {- Arity: 1, Strictness: <L,A> -}
                              = \ (w :: GHC.Prim.Void#)[OneShot] ->
                                case Lib.askToRun1
                                       `cast`
                                     (Turtle.Line.N:Line[0]) of wild3 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# dt2 dt9) of wild4 {
                                  GHC.Types.False -> lvl18
                                  GHC.Types.True
                                  -> case {__pkg_ccall text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                                        -> GHC.Prim.Word#
                                                                                                                        -> GHC.Prim.ByteArray#
                                                                                                                        -> GHC.Prim.Word#
                                                                                                                        -> GHC.Prim.Word#
                                                                                                                        -> GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld
                                                                                                                        -> (# GHC.Prim.State#
                                                                                                                                GHC.Prim.RealWorld,
                                                                                                                              GHC.Prim.Int# #)}
                                            dt
                                            (GHC.Prim.int2Word# dt1)
                                            dt7
                                            (GHC.Prim.int2Word# dt8)
                                            (GHC.Prim.int2Word# dt2)
                                            GHC.Prim.realWorld# of wild5 { (#,#) ds11 ds12 ->
                                     case GHC.Prim.narrow32Int# ds12 of wild6 {
                                       DEFAULT -> lvl18 0# -> lvl19 } } } }
                            } in
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.==# dt2 dt5) of wild3 {
                              GHC.Types.False -> $j GHC.Prim.void#
                              GHC.Types.True
                              -> case {__pkg_ccall text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                                    -> GHC.Prim.Word#
                                                                                                                    -> GHC.Prim.ByteArray#
                                                                                                                    -> GHC.Prim.Word#
                                                                                                                    -> GHC.Prim.Word#
                                                                                                                    -> GHC.Prim.State#
                                                                                                                         GHC.Prim.RealWorld
                                                                                                                    -> (# GHC.Prim.State#
                                                                                                                            GHC.Prim.RealWorld,
                                                                                                                          GHC.Prim.Int# #)}
                                        dt
                                        (GHC.Prim.int2Word# dt1)
                                        dt3
                                        (GHC.Prim.int2Word# dt4)
                                        (GHC.Prim.int2Word# dt2)
                                        GHC.Prim.realWorld# of wild4 { (#,#) ds11 ds12 ->
                                 case GHC.Prim.narrow32Int# ds12 of wild5 {
                                   DEFAULT -> $j GHC.Prim.void# 0# -> eta } } } } } }))) -}
4829086d696213b4e911c5883803debc
  askToRun1 :: Turtle.Line.Line
  {- Unfolding: (Turtle.Line.$fIsStringLine_$cfromString
                   Lib.askToRun2) -}
f104315b2603fcea7961637730b9d5df
  askToRun10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Please entery (y) or (n)"#) -}
5ba5153bd9cec1d0576fa15b2cd3ccf1
  askToRun11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Data.Text.IO.hPutStrLn1
                   GHC.IO.Handle.FD.stdout
                   Lib.askToRun12 `cast` (Turtle.Line.N:Line[0])) -}
26d450dc680cf207fecb25384cc67220
  askToRun12 :: Turtle.Line.Line
  {- Unfolding: (Turtle.Line.$fIsStringLine_$cfromString
                   Lib.askToRun13) -}
3c9fc4c355fab9b3529727f1da1c344a
  askToRun13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Setup Complete! Would you like to boot up the servers? (y) yes, (n) no"#) -}
6ae5b220655c9a8f41115d168956b656
  askToRun2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "n"#) -}
a8718f2c1c85fe725be80d912ba87b45
  askToRun3 :: Turtle.Line.Line
  {- Unfolding: (Turtle.Line.$fIsStringLine_$cfromString
                   Lib.askToRun4) -}
efbe291d770b8ab9d34ae58a301f1393
  askToRun4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "y"#) -}
1fbe91812120ecebe6dff4fa1ff3144f
  askToRun5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Data.Text.IO.hPutStrLn1
                   GHC.IO.Handle.FD.stdout
                   Lib.askToRun6 `cast` (Turtle.Line.N:Line[0])) -}
41fff166021145a68accad0cee667d7b
  askToRun6 :: Turtle.Line.Line
  {- Unfolding: (Turtle.Line.$fIsStringLine_$cfromString
                   Lib.askToRun7) -}
132574ca5c8bf14fa88c9c37a3bfd6b6
  askToRun7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "You can boot up each server by running ./run.sh"#) -}
4d480b8a1eb4d23b9843ac0fc34cff63
  askToRun8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Data.Text.IO.hPutStrLn1
                   GHC.IO.Handle.FD.stdout
                   Lib.askToRun9 `cast` (Turtle.Line.N:Line[0])) -}
84a26a9266a6c9e853776fd401ebf71d
  askToRun9 :: Turtle.Line.Line
  {- Unfolding: (Turtle.Line.$fIsStringLine_$cfromString
                   Lib.askToRun10) -}
e04907656d82befd9f4d8eece25e075a
  backendDirConfig :: Lib.DirSetup
  {- Strictness: m,
     Unfolding: (Lib.DirSetup
                   Lib.BACK_END
                   Lib.backendDirConfig2
                   Lib.backendDirConfig1) -}
dbf5386c176f972715ec20d49b4d88fc
  backendDirConfig1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "git@github.com:smaccoun/haskstar-haskell.git"#) -}
45316354d88c99cdd98d6a299a8f4254
  backendDirConfig2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "back-end"#) -}
d63f53d1186c7970cbffff74b7b339b0
  buildBackEnd ::
    Filesystem.Path.Internal.FilePath -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U(1*U,1*U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.buildBackEnd1
                  `cast`
                (<Filesystem.Path.Internal.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
5e9c229f90596f2a06fe6ea35476b607
  buildBackEnd1 ::
    Filesystem.Path.Internal.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U(1*U,1*U,U,U)><S,U>,
     Unfolding: (\ (topDir :: Filesystem.Path.Internal.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Lib.buildBackEnd6
                        Lib.buildBackEnd5
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Filesystem.setWorkingDirectory1
                        (case Lib.backendDirConfig2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                         case Filesystem.Path.Rules.$wposixFromText
                                ww1
                                ww2
                                ww3 of ww4 { (#,,,#) ww5 ww6 ww7 ww8 ->
                         case ww5 of wild {
                           GHC.Base.Nothing
                           -> Filesystem.Path.Internal.FilePath
                                (Filesystem.Path.Internal.pathRoot topDir)
                                (case topDir of wild1 { Filesystem.Path.Internal.FilePath ds2 ds3 ds4 ds5 ->
                                 GHC.Base.++
                                   @ [GHC.Types.Char]
                                   ds3
                                   (case Filesystem.Path.Internal.$fEqFilePath_$ccompare
                                           (Filesystem.Path.Internal.FilePath
                                              (GHC.Base.Nothing @ Filesystem.Path.Internal.Root)
                                              (GHC.Types.[] @ Filesystem.Path.Internal.Directory)
                                              ds4
                                              ds5)
                                           Filesystem.Path.Internal.empty of wild2 {
                                      DEFAULT
                                      -> GHC.Types.:
                                           @ [GHC.Types.Char]
                                           (Filesystem.Path.Internal.filenameChunk_$sgo
                                              (case ds4 of wild3 {
                                                 GHC.Base.Nothing -> GHC.Types.[] @ GHC.Types.Char
                                                 GHC.Base.Just x -> x })
                                              (case ds5 of wild3 {
                                                 [] -> GHC.Types.[] @ Filesystem.Path.Internal.Chunk
                                                 : ipv2 ipv3
                                                 -> GHC.Types.:
                                                      @ Filesystem.Path.Internal.Chunk
                                                      (GHC.Types.[] @ GHC.Types.Char)
                                                      (Data.OldList.prependToAll
                                                         @ Filesystem.Path.Internal.Chunk
                                                         Filesystem.Path.Internal.dot
                                                         wild3) }))
                                           ww6
                                      GHC.Types.EQ -> ww6 }) })
                                ww7
                                ww8
                           GHC.Base.Just ds
                           -> case ds of wild1 {
                                DEFAULT -> Filesystem.Path.Internal.FilePath wild ww6 ww7 ww8
                                Filesystem.Path.Internal.RootWindowsCurrentVolume
                                -> case topDir of wild2 { Filesystem.Path.Internal.FilePath ds2 ds3 ds4 ds5 ->
                                   case ds2 of wild3 {
                                     GHC.Base.Nothing
                                     -> Filesystem.Path.Internal.FilePath wild ww6 ww7 ww8
                                     GHC.Base.Just ds7
                                     -> case ds7 of wild4 {
                                          DEFAULT
                                          -> Filesystem.Path.Internal.FilePath wild ww6 ww7 ww8
                                          Filesystem.Path.Internal.RootWindowsVolume ds8 ds9
                                          -> Filesystem.Path.Internal.FilePath
                                               wild3
                                               ww6
                                               ww7
                                               ww8 } } } } } } })
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Lib.buildBackEnd2
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.IO.Exception.ExitCode>_R)
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 (# ipv4, GHC.Tuple.() #) } } }) -}
0a7f7ec8bfc6a3b5ae28ecd126a16d7a
  buildBackEnd10 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Lib.buildBackEnd11 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
a402fce8a74bba0d17accd43cdde4658
  buildBackEnd11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s2 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s2 of ds1 { (#,#) ipv ipv1 ->
                 Turtle.Format.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Turtle.Format.$fIsStringFormat2
                   Lib.buildBackEnd12
                   0#
                   ipv }) -}
8788816c3595d276abf3cc0334c266a2
  buildBackEnd12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \\n\
                   \***********************************************\n"#) -}
bbd048f16eb4692c81aa0733acd9bf91
  buildBackEnd2 :: GHC.Types.IO GHC.IO.Exception.ExitCode
  {- Unfolding: (Lib.buildBackEnd3
                   (Turtle.Shell.$fAlternativeShell4 @ Turtle.Line.Line)
                     `cast`
                   (Trans
                        (forall (r :: <*>_N).
                         <Control.Foldl.FoldM GHC.Types.IO Turtle.Line.Line r>_R
                         ->_R Sym (GHC.Types.N:IO[0] <r>_R))
                        (Sym (Turtle.Shell.N:Shell[0] <Turtle.Line.Line>_R)))) -}
b4c0df02f3eed8c018b0357a3fc1684a
  buildBackEnd3 ::
    Turtle.Shell.Shell Turtle.Line.Line
    -> GHC.Types.IO GHC.IO.Exception.ExitCode
  {- Unfolding: (Turtle.Prelude.shell
                   @ GHC.Types.IO
                   Control.Monad.IO.Class.$fMonadIOIO
                   Lib.buildBackEnd4) -}
8c5d0c491ce7c39e5fd5f9b70d94b86c
  buildBackEnd4 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "stack build"#) -}
bc02b4c3a055b643c7f81a44339efb6e
  buildBackEnd5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "BUILDING BACK END"#) -}
04e763e52bde78a9bfe4b7692b22f9ea
  buildBackEnd6 ::
    Data.Text.Internal.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,1*U(U,U,U)><S,U>,
     Unfolding: (\ (msg :: Data.Text.Internal.Text)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Data.Text.IO.appendFile2
                        GHC.IO.Handle.FD.stdout
                        Lib.buildBackEnd10
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Data.Text.IO.appendFile2
                        GHC.IO.Handle.FD.stdout
                        msg
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.$whPutChar
                        GHC.IO.Handle.FD.stdout
                        '\n'#
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 Data.Text.IO.appendFile2
                   GHC.IO.Handle.FD.stdout
                   Lib.buildBackEnd7
                   ipv4 } } }) -}
f6af9798607d0ca576917180a519ce5c
  buildBackEnd7 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Lib.buildBackEnd8 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
ffd4b4442a047544f2578c2f2df4ab90
  buildBackEnd8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s2 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s2 of ds1 { (#,#) ipv ipv1 ->
                 Turtle.Format.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Turtle.Format.$fIsStringFormat2
                   Lib.buildBackEnd9
                   0#
                   ipv }) -}
5b760f71e9cf0e5c5b3f8e03b512cc75
  buildBackEnd9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "***********************************************\n\
                   \\n"#) -}
e2164f480b623aa4b91e2ef17f4dc335
  buildFrontEnd ::
    Filesystem.Path.Internal.FilePath -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U(1*U,1*U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.buildFrontEnd1
                  `cast`
                (<Filesystem.Path.Internal.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
15a285b42e65a8eeb09d697f514d6fd9
  buildFrontEnd1 ::
    Filesystem.Path.Internal.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U(1*U,1*U,U,U)><S,U>,
     Unfolding: (\ (topDir :: Filesystem.Path.Internal.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Lib.buildBackEnd6
                        Lib.buildFrontEnd9
                        s of ds1 { (#,#) ipv ipv1 ->
                 let {
                   frontEndPath :: Filesystem.Path.Internal.FilePath
                   = case Lib.buildFrontEnd8 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                     case Filesystem.Path.Rules.$wposixFromText
                            ww1
                            ww2
                            ww3 of ww4 { (#,,,#) ww5 ww6 ww7 ww8 ->
                     case ww5 of wild {
                       GHC.Base.Nothing
                       -> Filesystem.Path.Internal.FilePath
                            (Filesystem.Path.Internal.pathRoot topDir)
                            (case topDir of wild1 { Filesystem.Path.Internal.FilePath ds2 ds3 ds4 ds5 ->
                             GHC.Base.++
                               @ [GHC.Types.Char]
                               ds3
                               (case Filesystem.Path.Internal.$fEqFilePath_$ccompare
                                       (Filesystem.Path.Internal.FilePath
                                          (GHC.Base.Nothing @ Filesystem.Path.Internal.Root)
                                          (GHC.Types.[] @ Filesystem.Path.Internal.Directory)
                                          ds4
                                          ds5)
                                       Filesystem.Path.Internal.empty of wild2 {
                                  DEFAULT
                                  -> GHC.Types.:
                                       @ [GHC.Types.Char]
                                       (Filesystem.Path.Internal.filenameChunk_$sgo
                                          (case ds4 of wild3 {
                                             GHC.Base.Nothing -> GHC.Types.[] @ GHC.Types.Char
                                             GHC.Base.Just x -> x })
                                          (case ds5 of wild3 {
                                             [] -> GHC.Types.[] @ Filesystem.Path.Internal.Chunk
                                             : ipv2 ipv3
                                             -> GHC.Types.:
                                                  @ Filesystem.Path.Internal.Chunk
                                                  (GHC.Types.[] @ GHC.Types.Char)
                                                  (Data.OldList.prependToAll
                                                     @ Filesystem.Path.Internal.Chunk
                                                     Filesystem.Path.Internal.dot
                                                     wild3) }))
                                       ww6
                                  GHC.Types.EQ -> ww6 }) })
                            ww7
                            ww8
                       GHC.Base.Just ds
                       -> case ds of wild1 {
                            DEFAULT -> Filesystem.Path.Internal.FilePath wild ww6 ww7 ww8
                            Filesystem.Path.Internal.RootWindowsCurrentVolume
                            -> case topDir of wild2 { Filesystem.Path.Internal.FilePath ds2 ds3 ds4 ds5 ->
                               case ds2 of wild3 {
                                 GHC.Base.Nothing
                                 -> Filesystem.Path.Internal.FilePath wild ww6 ww7 ww8
                                 GHC.Base.Just ds7
                                 -> case ds7 of wild4 {
                                      DEFAULT -> Filesystem.Path.Internal.FilePath wild ww6 ww7 ww8
                                      Filesystem.Path.Internal.RootWindowsVolume ds8 ds9
                                      -> Filesystem.Path.Internal.FilePath
                                           wild3
                                           ww6
                                           ww7
                                           ww8 } } } } } } }
                 } in
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (Filesystem.Path.Rules.darwin_ghc2 frontEndPath)
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Filesystem.setWorkingDirectory1
                        frontEndPath
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Lib.buildFrontEnd5
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.IO.Exception.ExitCode>_R)
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case Lib.buildFrontEnd2
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.IO.Exception.ExitCode>_R)
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8, GHC.Tuple.() #) } } } } }) -}
e4f58b0938028a57ba90e72ec9e78612
  buildFrontEnd2 :: GHC.Types.IO GHC.IO.Exception.ExitCode
  {- Unfolding: (Lib.buildFrontEnd3
                   (Turtle.Shell.$fAlternativeShell4 @ Turtle.Line.Line)
                     `cast`
                   (Trans
                        (forall (r :: <*>_N).
                         <Control.Foldl.FoldM GHC.Types.IO Turtle.Line.Line r>_R
                         ->_R Sym (GHC.Types.N:IO[0] <r>_R))
                        (Sym (Turtle.Shell.N:Shell[0] <Turtle.Line.Line>_R)))) -}
5fe46bd0c31a39aca6865af9b5c845ab
  buildFrontEnd3 ::
    Turtle.Shell.Shell Turtle.Line.Line
    -> GHC.Types.IO GHC.IO.Exception.ExitCode
  {- Unfolding: (Turtle.Prelude.shell
                   @ GHC.Types.IO
                   Control.Monad.IO.Class.$fMonadIOIO
                   Lib.buildFrontEnd4) -}
e2fdd314328a85e7033c63d7fb59aa7a
  buildFrontEnd4 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "elm-package install --yes"#) -}
589191ca4455164e42bc6e2d503d6648
  buildFrontEnd5 :: GHC.Types.IO GHC.IO.Exception.ExitCode
  {- Unfolding: (Lib.buildFrontEnd6
                   (Turtle.Shell.$fAlternativeShell4 @ Turtle.Line.Line)
                     `cast`
                   (Trans
                        (forall (r :: <*>_N).
                         <Control.Foldl.FoldM GHC.Types.IO Turtle.Line.Line r>_R
                         ->_R Sym (GHC.Types.N:IO[0] <r>_R))
                        (Sym (Turtle.Shell.N:Shell[0] <Turtle.Line.Line>_R)))) -}
4c6747c69840916279639363043ddbe7
  buildFrontEnd6 ::
    Turtle.Shell.Shell Turtle.Line.Line
    -> GHC.Types.IO GHC.IO.Exception.ExitCode
  {- Unfolding: (Turtle.Prelude.shell
                   @ GHC.Types.IO
                   Control.Monad.IO.Class.$fMonadIOIO
                   Lib.buildFrontEnd7) -}
8a3e984b7a7a82df55d606273e888c3e
  buildFrontEnd7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "yarn install"#) -}
cc2c0acc7456b94d2312d31998886911
  buildFrontEnd8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "front-end"#) -}
71ad9ce84c904512210dfb34cb347522
  buildFrontEnd9 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "BUILDING FRONT END"#) -}
de14399801397af9c87cf0cce40ec919
  dirName :: Lib.DirSetup -> Data.Text.Internal.Text
  RecSel Left Lib.DirSetup
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.DirSetup) ->
                 case ds of wild { Lib.DirSetup ds1 ds2 ds3 -> ds2 }) -}
c562f2bb098d1c9794dd275bbcba32a3
  dirStackType :: Lib.DirSetup -> Lib.DirStackType
  RecSel Left Lib.DirSetup
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.DirSetup) ->
                 case ds of wild { Lib.DirSetup ds1 ds2 ds3 -> ds1 }) -}
96650413b18d7a41b34421716b71ef4c
  frontendDirConfig :: Lib.DirSetup
  {- Strictness: m,
     Unfolding: (Lib.DirSetup
                   Lib.FRONT_END
                   Lib.buildFrontEnd8
                   Lib.frontendDirConfig1) -}
5bce21f9594355da9377c1dae312edeb
  frontendDirConfig1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "git@github.com:smaccoun/haskstar-elm.git"#) -}
5443b4680699db28fac0c622ed52933a
  getDir ::
    Filesystem.Path.Internal.FilePath
    -> Lib.DirSetup
    -> (Data.Text.Internal.Text, Filesystem.Path.Internal.FilePath)
  {- Arity: 2,
     Strictness: <L,U(1*U,1*U,U,U)><L,1*U(A,1*U(U,U,U),A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Filesystem.Path.Internal.FilePath) (w1 :: Lib.DirSetup) ->
                 case Lib.$wgetDir w w1 of ww { (#,#) ww1 ww2 -> (ww1, ww2) }) -}
522a720745ddd5b455b4146eba3af7ab
  getTemplate ::
    Filesystem.Path.Internal.FilePath
    -> Data.Text.Internal.Text -> Lib.DirSetup -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U)><L,U(U,U,U)><L,1*U(A,A,1*U(U,U,U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.getTemplate1
                  `cast`
                (<Filesystem.Path.Internal.FilePath>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Lib.DirSetup>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
08532ff9df2bd186d991d3412079d1ba
  getTemplate1 ::
    Filesystem.Path.Internal.FilePath
    -> Data.Text.Internal.Text
    -> Lib.DirSetup
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U)><L,U(U,U,U)><L,1*U(A,A,1*U(U,U,U))><S,U> -}
68b17d86b624c3575cc91fb487217176
  gitDir :: Lib.DirSetup -> Data.Text.Internal.Text
  RecSel Left Lib.DirSetup
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS),1*U(A,A,1*U(U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.DirSetup) ->
                 case ds of wild { Lib.DirSetup ds1 ds2 ds3 -> ds3 }) -}
a7f73f4553456ed998d903e07188fa03
  majorCommentBlock :: Data.Text.Internal.Text -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,1*U(U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.buildBackEnd6
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
074a1267a62869cf4ae6c062463f7104
  runBackEnd :: Filesystem.Path.Internal.FilePath -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U(1*U,1*U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.runBackEnd1
                  `cast`
                (<Filesystem.Path.Internal.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
e965fead5f4250d46267961f631012be
  runBackEnd1 ::
    Filesystem.Path.Internal.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U(1*U,1*U,U,U)><S,U> -}
cc6006c166563f9ab8427466d2a75eb5
  runFrontEnd :: Filesystem.Path.Internal.FilePath -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U(1*U,1*U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.runFrontEnd1
                  `cast`
                (<Filesystem.Path.Internal.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
8c8a24fcd3ffd16eb26152dc518af04e
  runFrontEnd1 ::
    Filesystem.Path.Internal.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U(1*U,1*U,U,U)><S,U> -}
23cdd3d69cad94da12a851a1e5955c0b
  runServers :: Filesystem.Path.Internal.FilePath -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U(U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.runServers1
                  `cast`
                (<Filesystem.Path.Internal.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
4474748ded23ce04950ebd99a3e9b52c
  runServers1 ::
    Filesystem.Path.Internal.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U(U,U,U,U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (topDir :: Filesystem.Path.Internal.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Lib.runBackEnd1 topDir s of ds1 { (#,#) ipv ipv1 ->
                 Lib.runFrontEnd1 topDir ipv }) -}
8f6f29870da3fff0ab15c7e091902bff
  setupDir ::
    Filesystem.Path.Internal.FilePath
    -> Lib.DirSetup -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U)><L,U(1*U,1*U(U,U,U),1*U(U,U,U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.setupDir1
                  `cast`
                (<Filesystem.Path.Internal.FilePath>_R
                 ->_R <Lib.DirSetup>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
00ef2a91fdb64d24db89aa40ce019a07
  setupDir1 ::
    Filesystem.Path.Internal.FilePath
    -> Lib.DirSetup
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U)><L,U(1*U,1*U(U,U,U),1*U(U,U,U))><S,U>,
     Unfolding: (\ (rootDir :: Filesystem.Path.Internal.FilePath)
                   (dirSetup :: Lib.DirSetup)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Lib.getTemplate1
                        rootDir
                        (case dirSetup of wild { Lib.DirSetup ds ds1 ds2 -> ds1 })
                        dirSetup
                        s of ds1 { (#,#) ipv ipv1 ->
                 case dirSetup of wild { Lib.DirSetup ds ds2 ds3 ->
                 case ds of wild1 {
                   Lib.FRONT_END -> Lib.buildFrontEnd1 rootDir ipv
                   Lib.BACK_END -> Lib.buildBackEnd1 rootDir ipv } } }) -}
51d63705dafc6786a391c3cab6b9c573
  validateAndSetupDir ::
    Filesystem.Path.Internal.FilePath
    -> Lib.DirSetup -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U)><L,U(U,U(U,U,U),U(U,U,U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.validateAndSetupDir1
                  `cast`
                (<Filesystem.Path.Internal.FilePath>_R
                 ->_R <Lib.DirSetup>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
6614c2f8d923eebd153b3e79c4b00ad3
  validateAndSetupDir1 ::
    Filesystem.Path.Internal.FilePath
    -> Lib.DirSetup
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U)><L,U(U,U(U,U,U),U(U,U,U))><S,U>,
     Unfolding: (\ (rootDir :: Filesystem.Path.Internal.FilePath)
                   (dirSetup :: Lib.DirSetup)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   dname :: Data.Text.Internal.Text
                   = case dirSetup of wild { Lib.DirSetup ds ds1 ds2 -> ds1 }
                 } in
                 case Lib.buildBackEnd6
                        (Data.Text.append Lib.validateAndSetupDir15 dname)
                        eta of ds1 { (#,#) ipv ipv1 ->
                 let {
                   ds :: Filesystem.Path.Internal.FilePath
                   = case dname of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                     case Filesystem.Path.Rules.$wposixFromText
                            ww1
                            ww2
                            ww3 of ww4 { (#,,,#) ww5 ww6 ww7 ww8 ->
                     case ww5 of wild {
                       GHC.Base.Nothing
                       -> Filesystem.Path.Internal.FilePath
                            (Filesystem.Path.Internal.pathRoot rootDir)
                            (case rootDir of wild1 { Filesystem.Path.Internal.FilePath ds2 ds3 ds4 ds5 ->
                             GHC.Base.++
                               @ [GHC.Types.Char]
                               ds3
                               (case Filesystem.Path.Internal.$fEqFilePath_$ccompare
                                       (Filesystem.Path.Internal.FilePath
                                          (GHC.Base.Nothing @ Filesystem.Path.Internal.Root)
                                          (GHC.Types.[] @ Filesystem.Path.Internal.Directory)
                                          ds4
                                          ds5)
                                       Filesystem.Path.Internal.empty of wild2 {
                                  DEFAULT
                                  -> GHC.Types.:
                                       @ [GHC.Types.Char]
                                       (Filesystem.Path.Internal.filenameChunk_$sgo
                                          (case ds4 of wild3 {
                                             GHC.Base.Nothing -> GHC.Types.[] @ GHC.Types.Char
                                             GHC.Base.Just x -> x })
                                          (case ds5 of wild3 {
                                             [] -> GHC.Types.[] @ Filesystem.Path.Internal.Chunk
                                             : ipv2 ipv3
                                             -> GHC.Types.:
                                                  @ Filesystem.Path.Internal.Chunk
                                                  (GHC.Types.[] @ GHC.Types.Char)
                                                  (Data.OldList.prependToAll
                                                     @ Filesystem.Path.Internal.Chunk
                                                     Filesystem.Path.Internal.dot
                                                     wild3) }))
                                       ww6
                                  GHC.Types.EQ -> ww6 }) })
                            ww7
                            ww8
                       GHC.Base.Just ds2
                       -> case ds2 of wild1 {
                            DEFAULT -> Filesystem.Path.Internal.FilePath wild ww6 ww7 ww8
                            Filesystem.Path.Internal.RootWindowsCurrentVolume
                            -> case rootDir of wild2 { Filesystem.Path.Internal.FilePath ds3 ds4 ds5 ds6 ->
                               case ds3 of wild3 {
                                 GHC.Base.Nothing
                                 -> Filesystem.Path.Internal.FilePath wild ww6 ww7 ww8
                                 GHC.Base.Just ds7
                                 -> case ds7 of wild4 {
                                      DEFAULT -> Filesystem.Path.Internal.FilePath wild ww6 ww7 ww8
                                      Filesystem.Path.Internal.RootWindowsVolume ds8 ds9
                                      -> Filesystem.Path.Internal.FilePath
                                           wild3
                                           ww6
                                           ww7
                                           ww8 } } } } } } }
                 } in
                 case Lib.validateAndSetupDir2
                        dname
                        ds
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild {
                   Lib.Valid
                   -> case Lib.setupDir1
                             rootDir
                             dirSetup
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      (# ipv4, GHC.Tuple.() #) }
                   Lib.Replace
                   -> case Turtle.Prelude.rmtree3
                             ds
                             @ ()
                             Turtle.Prelude.rmtree1
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case Lib.setupDir1
                             rootDir
                             dirSetup
                             ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                      (# ipv6, GHC.Tuple.() #) } }
                   Lib.Keep -> (# ipv2, GHC.Tuple.() #) } } }) -}
b87920b02fbbfdee1588a73d9bf276c4
  validateAndSetupDir10 :: Turtle.Line.Line
  {- Unfolding: (Turtle.Line.$fIsStringLine_$cfromString
                   Lib.validateAndSetupDir11) -}
c6ca10ae25e4ecd3817916a7e248dd24
  validateAndSetupDir11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Would you like to replace (R) or keep (enter)"#) -}
b17f2da4021e0c307b787737ef15a6cf
  validateAndSetupDir12 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "Found existing directory "#) -}
7727dd3eccd04c86a0e34c30b085bdf6
  validateAndSetupDir13 :: Turtle.Line.Line
  {- Unfolding: (Turtle.Line.$fIsStringLine_$cfromString
                   Lib.validateAndSetupDir14) -}
328323d1e95a6f01520191f0772b3f13
  validateAndSetupDir14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Detected valid initial state"#) -}
604eb3c1ccf95856f993400b0e615131
  validateAndSetupDir15 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "Setting up "#) -}
db8ec73c276b9355939890b8970390c0
  validateAndSetupDir2 ::
    Data.Text.Internal.Text
    -> Filesystem.Path.Internal.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Lib.ValidateResult #)
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,U(U,U,U,U)><S,U>,
     Unfolding: (\ (dname :: Data.Text.Internal.Text)
                   (dPath :: Filesystem.Path.Internal.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Filesystem.createDirectory2 dPath s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Types.False
                   -> case Data.Text.IO.appendFile2
                             GHC.IO.Handle.FD.stdout
                             Lib.validateAndSetupDir13 `cast` (Turtle.Line.N:Line[0])
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case GHC.IO.Handle.Text.$whPutChar
                             GHC.IO.Handle.FD.stdout
                             '\n'#
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      (# ipv4, Lib.Valid #) } }
                   GHC.Types.True
                   -> case Data.Text.IO.appendFile2
                             GHC.IO.Handle.FD.stdout
                             (Data.Text.append Lib.validateAndSetupDir12 dname)
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case GHC.IO.Handle.Text.$whPutChar
                             GHC.IO.Handle.FD.stdout
                             '\n'#
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case Data.Text.IO.appendFile2
                             GHC.IO.Handle.FD.stdout
                             Lib.validateAndSetupDir10 `cast` (Turtle.Line.N:Line[0])
                             ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                      case GHC.IO.Handle.Text.$whPutChar
                             GHC.IO.Handle.FD.stdout
                             '\n'#
                             ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                      case Turtle.Prelude.readline1 ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                      case ipv11 of wild1 {
                        GHC.Base.Nothing
                        -> case Lib.validateAndSetupDir9
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, Lib.ValidateResult #)
                           of {}
                        GHC.Base.Just a
                        -> case a `cast`
                                (Turtle.Line.N:Line[0]) of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case Lib.validateAndSetupDir7
                                  `cast`
                                (Turtle.Line.N:Line[0]) of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# dt2 dt5) of wild4 {
                             GHC.Types.False
                             -> case Data.Text.IO.appendFile2
                                       GHC.IO.Handle.FD.stdout
                                       Lib.validateAndSetupDir5 `cast` (Turtle.Line.N:Line[0])
                                       ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                                case GHC.IO.Handle.Text.$whPutChar
                                       GHC.IO.Handle.FD.stdout
                                       '\n'#
                                       ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                                (# ipv14, Lib.Keep #) } }
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                                   -> GHC.Prim.Word#
                                                                                                                   -> GHC.Prim.ByteArray#
                                                                                                                   -> GHC.Prim.Word#
                                                                                                                   -> GHC.Prim.Word#
                                                                                                                   -> GHC.Prim.State#
                                                                                                                        GHC.Prim.RealWorld
                                                                                                                   -> (# GHC.Prim.State#
                                                                                                                           GHC.Prim.RealWorld,
                                                                                                                         GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds11 ds12 ->
                                case GHC.Prim.narrow32Int# ds12 of wild6 {
                                  DEFAULT
                                  -> case Data.Text.IO.appendFile2
                                            GHC.IO.Handle.FD.stdout
                                            Lib.validateAndSetupDir5 `cast` (Turtle.Line.N:Line[0])
                                            ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                                     case GHC.IO.Handle.Text.$whPutChar
                                            GHC.IO.Handle.FD.stdout
                                            '\n'#
                                            ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                                     (# ipv14, Lib.Keep #) } }
                                  0#
                                  -> case Data.Text.IO.appendFile2
                                            GHC.IO.Handle.FD.stdout
                                            Lib.validateAndSetupDir3 `cast` (Turtle.Line.N:Line[0])
                                            ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                                     case GHC.IO.Handle.Text.$whPutChar
                                            GHC.IO.Handle.FD.stdout
                                            '\n'#
                                            ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                                     (# ipv14, Lib.Replace #) } } } } } } } } } } } } } } }) -}
406f2dd2046432eef077e66a45496a06
  validateAndSetupDir3 :: Turtle.Line.Line
  {- Unfolding: (Turtle.Line.$fIsStringLine_$cfromString
                   Lib.validateAndSetupDir4) -}
f866bd4df8ae23dc0ba718fc42fc6484
  validateAndSetupDir4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Replacing existing directories"#) -}
08748aec56ecd2d4d033aeeaddda09b0
  validateAndSetupDir5 :: Turtle.Line.Line
  {- Unfolding: (Turtle.Line.$fIsStringLine_$cfromString
                   Lib.validateAndSetupDir6) -}
322e4cccebda86f2e4761be093f8c837
  validateAndSetupDir6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Keeping existing directory"#) -}
ad2627425f3a86769fc742b462cc136b
  validateAndSetupDir7 :: Turtle.Line.Line
  {- Unfolding: (Turtle.Line.$fIsStringLine_$cfromString
                   Lib.validateAndSetupDir8) -}
8f3f65c24357c159f3c393431a96fb9c
  validateAndSetupDir8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "R"#) -}
d600c66a978bca43b0a3a65975e13c1f
  validateAndSetupDir9 :: GHC.Types.IO Lib.ValidateResult
  {- Strictness: x -}
d67d49c02388989cb14faf34e905cc9a
  validateInitialSetup ::
    Data.Text.Internal.Text
    -> Filesystem.Path.Internal.FilePath
    -> GHC.Types.IO Lib.ValidateResult
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,U(U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.validateAndSetupDir2
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R <Filesystem.Path.Internal.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Lib.ValidateResult>_R)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

